package com.Chapter_17_COLLECTIONS_FRAMEWORK.Ch_14_6_Map;

/*
    Hashtable:

     - HashTable is the direct-implemented class of Map interface.
     - It is a legacy class.
     - It was introduced in JDK 1.0 version.
     - It's underlying data structure is hashtable


    Syntax:

        import java.util;

        class HashTable implements Map
        (It also extends Dictionary class and implements Cloneable, Serializable interface)
        {
            constructors
            methods
        }


    Properties:

     - TreeMap stores the data in key-value pairs
        e.g., key   |   value
            [ 101   |   "sova"  ] <- Each key-value pair is known as "Entry"
              102   |   "Jett"
              103   |   "raze"
     - Keys should be unique but values can be duplicated.
     - It can store heterogeneous/different elements at key positions.
     - It does not support "NULL" values.
     - It does not follow insertion order.
     - It does not follow sorting order.
     - It is synchronized data structures.


    Working of Hashtable:

     - It's initial capacity is 11. And cells of hashtable are called "buckets".

        Hashtable ht = new Hashtable();
        (This will create a hashtable with initial capacity of 11 elements, i.e., 0 to 10)
        (Each key has a unique value generated by JVM called "hashcode")
        (Which later on the hashcode is being calculated through "hashing technique" to find the index)

        ht.put(106, "sova");
              (hashcode % 11 = remainder)
              (106 % 11 = 7)        <--   (106, "sova") will get stored in 7th position of hashtable

        ht.put(102, "jett");
              (102 % 11 = 3)        <--   (102, "jett") will get stored in 3rd position of hashtable

        ht.put(108, "sage");
              (108 % 11 = 9)        <--   (108, "sage") will get stored in 9th position of hashtable

        ht.put(117, "raze");
              (117 % 11 = 7)        <--   In this case, it'll create "Hash-collision" as 7th place is already occupied.
                                          Hash-collision: a situation when multiple data shares the same indices values.
                                          In this case, LinkedList will come in the picture / get activated and create a node and that node will store the entry "(117, "raze")".

     - The retrieval process for elements will be:
        - top - to - bottom &
        - right - to - left

        Output: 108: "sage", 117: "raze", 106: "sova", 102: "jett"


    Constructor:

        1. Hashtable()
          - Constructs a new, empty hashtable with a default initial capacity (11) and load factor (0.75).

        2. Hashtable(int initialCapacity)
          - Constructs a new, empty hashtable with the specified initial capacity and default load factor (0.75).

        3. Hashtable(int initialCapacity, float loadFactor)
          - Constructs a new, empty hashtable with the specified initial capacity and the specified load factor.

        4. Hashtable(Map<? extends K,? extends V> t)
          - Constructs a new hashtable with the same mappings as the given Map.

 */


import java.util.Enumeration;
import java.util.Hashtable;
import java.util.TreeMap;

public class Ch_14_6_4_Hashtable {
    public static void main(String[] args) {

        Hashtable<String, Integer> hashtable = new Hashtable<>();

        hashtable.put("A", 1);
        hashtable.put("B", 2);
        hashtable.put("C", 3);

        System.out.println("Value of A: " + hashtable.get("A"));

        hashtable.remove("B");

        // Enumerating the elements of the hashtable
        Enumeration<String> keys = hashtable.keys();
        while (keys.hasMoreElements()) {
            String key = keys.nextElement();
            System.out.println("Key: " + key + ", Value: " + hashtable.get(key));
        }

    }
}
